"use strict";var ApplicationConfiguration=function(){var applicationModuleName="network",applicationModuleVendorDependencies=["ngResource","ngCookies","ngAnimate","ngTouch","ngSanitize","ui.router","ui.bootstrap","ui.utils"],registerModule=function(moduleName,dependencies){angular.module(moduleName,dependencies||[]),angular.module(applicationModuleName).requires.push(moduleName)};return{applicationModuleName:applicationModuleName,applicationModuleVendorDependencies:applicationModuleVendorDependencies,registerModule:registerModule}}();angular.module(ApplicationConfiguration.applicationModuleName,ApplicationConfiguration.applicationModuleVendorDependencies),angular.module(ApplicationConfiguration.applicationModuleName).config(["$locationProvider",function($locationProvider){$locationProvider.hashPrefix("!")}]),angular.element(document).ready(function(){"#_=_"===window.location.hash&&(window.location.hash="#!"),angular.bootstrap(document,[ApplicationConfiguration.applicationModuleName])}),ApplicationConfiguration.registerModule("actions"),ApplicationConfiguration.registerModule("core"),ApplicationConfiguration.registerModule("locations"),ApplicationConfiguration.registerModule("members"),ApplicationConfiguration.registerModule("network-events"),ApplicationConfiguration.registerModule("participants"),ApplicationConfiguration.registerModule("participations"),ApplicationConfiguration.registerModule("users"),angular.module("actions").run(["Menus",function(Menus){Menus.addMenuItem("topbar","Actions","actions","dropdown","/actions(/create)?"),Menus.addSubMenuItem("topbar","actions","List Actions","actions"),Menus.addSubMenuItem("topbar","actions","New Action","actions/create")}]),angular.module("actions").config(["$stateProvider",function($stateProvider){$stateProvider.state("listActions",{url:"/actions",templateUrl:"modules/actions/views/list-actions.client.view.html"}).state("createAction",{url:"/actions/create",templateUrl:"modules/actions/views/create-action.client.view.html"}).state("viewAction",{url:"/actions/:actionId",templateUrl:"modules/actions/views/view-action.client.view.html"}).state("editAction",{url:"/actions/:actionId/edit",templateUrl:"modules/actions/views/edit-action.client.view.html"})}]),angular.module("actions").controller("ActionsController",["$scope","$stateParams","$location","Authentication","Actions","Participants","NetworkEvents",function($scope,$stateParams,$location,Authentication,Actions,Participants,NetworkEvents){$scope.authentication=Authentication,$scope.networkEvents=NetworkEvents.query(),$scope.create=function(){$scope.action=$scope.action||{};var match_ids=[];angular.forEach($scope.matches,function(match){this.push(match._id)},match_ids);var networkEventID=null;$scope.networkEvent&&(networkEventID=$scope.networkEvent._id);var actorID=null;$scope.actor&&(actorID=$scope.actor._id);var action=new Actions({networkEvent:networkEventID,actor:actorID,type:$scope.action.type,description:$scope.action.description,matches:match_ids});action.$save(function(response){$location.path("actions/create"),$scope.success=$scope.actor.displayName+"'s action was successfully added.",$scope.actor=null,$scope.action.type=null,$scope.action.description=null,$scope.matches=[],$scope.selectedMatch=null;var actor_input=document.querySelector("#actor");actor_input&&actor_input.focus()},function(errorResponse){$scope.success=null,$scope.error=errorResponse.data.message})},$scope.remove=function(action){if(action){action.$remove();for(var i in $scope.actions)$scope.actions[i]===action&&$scope.actions.splice(i,1)}else $scope.action.$remove(function(){$location.path("actions")})},$scope.update=function(){var action=$scope.action;action.$update(function(){$location.path("actions/"+action._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.actions=Actions.query()},$scope.findOne=function(){$scope.action=Actions.get({actionId:$stateParams.actionId})},$scope.findParticipants=function(name){return Participants.query({name:name}).$promise},$scope.newAction=function(){$scope.actor=null,$scope.matches=[]},$scope.addMatch=function(matches,match){matches.push(match),$scope.selectedMatch=null},$scope.removeMatch=function(matches,matchIndex){matches.splice(matchIndex,1)}}]),angular.module("actions").factory("Actions",["$resource",function($resource){var Action=$resource("actions/:actionId",{actionId:"@_id"},{update:{method:"PUT"}});return Action}]),angular.module("core").config(["$stateProvider","$urlRouterProvider",function($stateProvider,$urlRouterProvider){$urlRouterProvider.otherwise("/"),$stateProvider.state("home",{url:"/",templateUrl:"modules/core/views/home.client.view.html"})}]),angular.module("core").controller("HeaderController",["$scope","Authentication","Menus",function($scope,Authentication,Menus){$scope.authentication=Authentication,$scope.isCollapsed=!1,$scope.menu=Menus.getMenu("topbar"),$scope.toggleCollapsibleMenu=function(){$scope.isCollapsed=!$scope.isCollapsed},$scope.$on("$stateChangeSuccess",function(){$scope.isCollapsed=!1})}]),angular.module("core").controller("HomeController",["$scope","Authentication",function($scope,Authentication){$scope.authentication=Authentication}]),angular.module("core").service("Menus",[function(){this.defaultRoles=["*"],this.menus={};var shouldRender=function(user){if(!user)return this.isPublic;if(~this.roles.indexOf("*"))return!0;for(var userRoleIndex in user.roles)for(var roleIndex in this.roles)if(this.roles[roleIndex]===user.roles[userRoleIndex])return!0;return!1};this.validateMenuExistance=function(menuId){if(menuId&&menuId.length){if(this.menus[menuId])return!0;throw new Error("Menu does not exists")}throw new Error("MenuId was not provided")},this.getMenu=function(menuId){return this.validateMenuExistance(menuId),this.menus[menuId]},this.addMenu=function(menuId,isPublic,roles){return this.menus[menuId]={isPublic:isPublic||!1,roles:roles||this.defaultRoles,items:[],shouldRender:shouldRender},this.menus[menuId]},this.removeMenu=function(menuId){this.validateMenuExistance(menuId),delete this.menus[menuId]},this.addMenuItem=function(menuId,menuItemTitle,menuItemURL,menuItemType,menuItemUIRoute,isPublic,roles,position){return this.validateMenuExistance(menuId),this.menus[menuId].items.push({title:menuItemTitle,link:menuItemURL,menuItemType:menuItemType||"item",menuItemClass:menuItemType,uiRoute:menuItemUIRoute||"/"+menuItemURL,isPublic:null===isPublic||"undefined"==typeof isPublic?this.menus[menuId].isPublic:isPublic,roles:null===roles||"undefined"==typeof roles?this.menus[menuId].roles:roles,position:position||0,items:[],shouldRender:shouldRender}),this.menus[menuId]},this.addSubMenuItem=function(menuId,rootMenuItemURL,menuItemTitle,menuItemURL,menuItemUIRoute,isPublic,roles,position){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].link===rootMenuItemURL&&this.menus[menuId].items[itemIndex].items.push({title:menuItemTitle,link:menuItemURL,uiRoute:menuItemUIRoute||"/"+menuItemURL,isPublic:null===isPublic||"undefined"==typeof isPublic?this.menus[menuId].items[itemIndex].isPublic:isPublic,roles:null===roles||"undefined"==typeof roles?this.menus[menuId].items[itemIndex].roles:roles,position:position||0,shouldRender:shouldRender});return this.menus[menuId]},this.removeMenuItem=function(menuId,menuItemURL){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].link===menuItemURL&&this.menus[menuId].items.splice(itemIndex,1);return this.menus[menuId]},this.removeSubMenuItem=function(menuId,submenuItemURL){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)for(var subitemIndex in this.menus[menuId].items[itemIndex].items)this.menus[menuId].items[itemIndex].items[subitemIndex].link===submenuItemURL&&this.menus[menuId].items[itemIndex].items.splice(subitemIndex,1);return this.menus[menuId]},this.addMenu("topbar")}]),angular.module("locations").run(["Menus",function(Menus){Menus.addMenuItem("topbar","Locations","locations","dropdown","/locations(/create)?"),Menus.addSubMenuItem("topbar","locations","List Locations","locations"),Menus.addSubMenuItem("topbar","locations","New Location","locations/create")}]),angular.module("locations").config(["$stateProvider",function($stateProvider){$stateProvider.state("listLocations",{url:"/locations",templateUrl:"modules/locations/views/list-locations.client.view.html"}).state("createLocation",{url:"/locations/create",templateUrl:"modules/locations/views/create-location.client.view.html"}).state("viewLocation",{url:"/locations/:locationId",templateUrl:"modules/locations/views/view-location.client.view.html"}).state("editLocation",{url:"/locations/:locationId/edit",templateUrl:"modules/locations/views/edit-location.client.view.html"})}]),angular.module("locations").controller("LocationsController",["$scope","$stateParams","$location","Authentication","Locations",function($scope,$stateParams,$location,Authentication,Locations){$scope.authentication=Authentication,$scope.create=function(){var location=new Locations({name:this.name});location.$save(function(response){$location.path("locations/"+response._id),$scope.name=""},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(location){if(location){location.$remove();for(var i in $scope.locations)$scope.locations[i]===location&&$scope.locations.splice(i,1)}else $scope.location.$remove(function(){$location.path("locations")})},$scope.update=function(){var location=$scope.location;location.$update(function(){$location.path("locations/"+location._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.locations=Locations.query()},$scope.findOne=function(){$scope.location=Locations.get({locationId:$stateParams.locationId})}}]),angular.module("locations").factory("Locations",["$resource",function($resource){return $resource("locations/:locationId",{locationId:"@_id"},{update:{method:"PUT"}})}]),angular.module("members").run(["Menus",function(Menus){Menus.addMenuItem("topbar","Members","members","dropdown","/members(/create)?"),Menus.addSubMenuItem("topbar","members","List Members","members"),Menus.addSubMenuItem("topbar","members","New Member","members/create")}]),angular.module("members").config(["$stateProvider",function($stateProvider){$stateProvider.state("listMembers",{url:"/members",templateUrl:"modules/members/views/list-members.client.view.html"}).state("createMember",{url:"/members/create",templateUrl:"modules/members/views/create-member.client.view.html"}).state("viewMember",{url:"/members/:memberId",templateUrl:"modules/members/views/view-member.client.view.html"}).state("editMember",{url:"/members/:memberId/edit",templateUrl:"modules/members/views/edit-member.client.view.html"})}]),angular.module("members").controller("MembersController",["$scope","$stateParams","$location","Authentication","Members","Participants",function($scope,$stateParams,$location,Authentication,Members,Participants){$scope.authentication=Authentication,$scope.create=function(){var clearFields=function(Participant){$scope.member.firstName="",$scope.member.lastName="",$scope.member.phone="",$scope.member.email="",$scope.member.identity="",$scope.member.affiliation="",$scope.member.address="",$scope.member.city="",$scope.member.state="",$scope.member.zipCode="",$scope.member.shirtSize="",$scope.member.shirtReceived="",$scope.member.talent="",$scope.member.placeOfWorship="",$scope.member.recruitment="",$scope.member.communityNetworks="",$scope.member.extraGroups="",$scope.member.otherNetworks=""},member=$scope.member;member&&member._id?member.$update(function(response){$location.path("members/"+response._id),clearFields(response)},function(errorResponse){$scope.error=errorResponse.data.message}):member.$save(function(response){$location.path("members/"+response._id),clearFields(response)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(member){if(member){member.$remove();for(var i in $scope.members)$scope.members[i]===member&&$scope.members.splice(i,1)}else $scope.member.$remove(function(){$location.path("members")})},$scope.update=function(){var member=$scope.member;member.$update(function(){$location.path("members/"+member._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.members=Members.query()},$scope.showOnlyShirtlessMembers=!1,$scope.shirtFilter=function(member){return 1==$scope.showOnlyShirtlessMembers?member.shirtReceived===!1:member},$scope.findParticipants=function(name){return Participants.query({name:name}).$promise},$scope.findOne=function(){$scope.member=Members.get({memberId:$stateParams.memberId})},$scope.newMember=function(){$scope.member=new Members({communityNetworks:"",extraGroups:"",otherNetworks:""})},$scope.selectMember=function(participant){$scope.member=new Members(participant),$scope.member.communityNetworks="",$scope.member.extraGroups="",$scope.member.otherNetworks=""}}]),angular.module("members").factory("Members",["$resource",function($resource){return $resource("members/:memberId",{memberId:"@_id"},{update:{method:"PUT"}})}]),angular.module("network-events").run(["Menus",function(Menus){Menus.addMenuItem("topbar","Events","network-events","dropdown","/network-events(/create)?"),Menus.addSubMenuItem("topbar","network-events","List Events","network-events"),Menus.addSubMenuItem("topbar","network-events","New Event","network-events/create")}]),angular.module("network-events").config(["$stateProvider",function($stateProvider){$stateProvider.state("listNetworkEvents",{url:"/network-events",templateUrl:"modules/network-events/views/list-network-events.client.view.html"}).state("createNetworkEvent",{url:"/network-events/create",templateUrl:"modules/network-events/views/create-network-event.client.view.html"}).state("viewNetworkEvent",{url:"/network-events/:networkEventId",templateUrl:"modules/network-events/views/view-network-event.client.view.html"}).state("editNetworkEvent",{url:"/network-events/:networkEventId/edit",templateUrl:"modules/network-events/views/edit-network-event.client.view.html"})}]),angular.module("network-events").controller("NetworkEventsController",["$scope","$stateParams","$location","Authentication","NetworkEvents","Locations","Participations",function($scope,$stateParams,$location,Authentication,NetworkEvents,Locations,Participations){$scope.authentication=Authentication,$scope.status={dateOpen:!1},$scope.open=function($event){$event.preventDefault(),$event.stopPropagation(),$scope.status.dateOpen=!$scope.status.dateOpen},$scope.create=function(){var networkEvent=new NetworkEvents({name:this.networkEvent.name,eventType:this.networkEvent.eventType,location:this.networkEvent.location._id,scheduled:this.networkEvent.scheduled});networkEvent.$save(function(response){$location.path("network-events/"+response._id),$scope.networkEvent.name="",$scope.networkEvent.eventType="",$scope.networkEvent.location="",$scope.networkEvent.scheduled=""},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(networkEvent){if(networkEvent){networkEvent.$remove();for(var i in $scope.networkEvents)$scope.networkEvents[i]===networkEvent&&$scope.networkEvents.splice(i,1)}else $scope.networkEvent.$remove(function(){$location.path("network-events")})},$scope.update=function(){var networkEvent=$scope.networkEvent;networkEvent.$update(function(){$location.path("network-events/"+networkEvent._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.networkEvents=NetworkEvents.query()},$scope.findOne=function(){$scope.networkEvent=NetworkEvents.get({networkEventId:$stateParams.networkEventId})},$scope.findLocations=function(){$scope.locations=Locations.query()},$scope.initNew=function(){$scope.findLocations(),$scope.networkEvent=new NetworkEvents({}),$scope.networkEvent.scheduled=new Date,$scope.networkEvent.scheduled.setHours(19),$scope.networkEvent.scheduled.setMinutes(0),$scope.networkEvent.scheduled.setSeconds(0)},$scope.initEdit=function(){$scope.findLocations(),$scope.findOne()},$scope.initView=function(){$scope.findOne(),$scope.participations=Participations.query({networkEventId:$stateParams.networkEventId})}}]),angular.module("network-events").factory("NetworkEvents",["$resource","$filter",function($resource,$filter){var NetworkEvent=$resource("network-events/:networkEventId",{networkEventId:"@_id"},{update:{method:"PUT"}});return angular.extend(NetworkEvent.prototype,{listName:function(){return this.name+" ("+$filter("date")(this.scheduled)+")"}}),NetworkEvent}]),angular.module("participants").run(["Menus",function(Menus){Menus.addMenuItem("topbar","Participants","participants","dropdown","/participants(/create)?"),Menus.addSubMenuItem("topbar","participants","List Participants","participants"),Menus.addSubMenuItem("topbar","participants","New Participant","participants/create")}]),angular.module("participants").config(["$stateProvider",function($stateProvider){$stateProvider.state("listParticipants",{url:"/participants",templateUrl:"modules/participants/views/list-participants.client.view.html"}).state("createParticipant",{url:"/participants/create",templateUrl:"modules/participants/views/create-participant.client.view.html"}).state("viewParticipant",{url:"/participants/:participantId",templateUrl:"modules/participants/views/view-participant.client.view.html"}).state("editParticipant",{url:"/participants/:participantId/edit",templateUrl:"modules/participants/views/edit-participant.client.view.html"})}]),angular.module("participants").controller("ParticipantsController",["$scope","$stateParams","$location","Authentication","Participants",function($scope,$stateParams,$location,Authentication,Participants){$scope.authentication=Authentication,$scope.create=function(){var participant=new Participants($scope.participant);participant.$save(function(response){$location.path("participants/"+response._id),$scope.participant.firstName="",$scope.participant.lastName="",$scope.participant.phone="",$scope.participant.email="",$scope.participant.identity="",$scope.participant.affiliation=""},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(participant){if(participant){participant.$remove();for(var i in $scope.participants)$scope.participants[i]===participant&&$scope.participants.splice(i,1)}else $scope.participant.$remove(function(){$location.path("participants")})},$scope.update=function(){var participant=$scope.participant;participant.$update(function(){$location.path("participants/"+participant._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.participants=Participants.query()},$scope.findOne=function(){$scope.participant=Participants.get({participantId:$stateParams.participantId})}}]),angular.module("participants").factory("Participants",["$resource",function($resource){var Participant=$resource("participants/:participantId",{participantId:"@_id"},{update:{method:"PUT"}});return angular.extend(Participant.prototype,{listName:function(){return this.displayName+" ("+this.phone+")"}}),Participant}]),angular.module("participations").config(["$stateProvider",function($stateProvider){$stateProvider.state("createParticipation",{url:"/network-events/:networkEventId/participations/create",templateUrl:"modules/participations/views/create-participation.client.view.html"})}]),angular.module("participations").controller("ParticipationsController",["$scope","$stateParams","$location","Authentication","Participations","NetworkEvents","Participants",function($scope,$stateParams,$location,Authentication,Participations,NetworkEvents,Participants){$scope.authentication=Authentication,$scope.isSelectionEditable=!1,$scope.create=function(){var saveParticipation=function(attendee){var participation=new Participations({participant:attendee._id});participation.$save({networkEventId:$stateParams.networkEventId},function(response){$location.path("network-events/"+$stateParams.networkEventId+"/participations/create"),$scope.success=$scope.attendee.firstName+" "+$scope.attendee.lastName+" was successfully added.",$scope.isSelectionEditable=!1,$scope.error=null,$scope.selected=null,$scope.attendee=null;var attendee_input=document.querySelector("#participant");attendee_input&&attendee_input.focus()},function(errorResponse){$scope.error=errorResponse.data.message})};if($scope.attendee&&$scope.attendee._id)$scope.attendee.$update(function(response){saveParticipation(response)},function(errorResponse){$scope.error=errorResponse.data.message});else{var participant=new Participants($scope.attendee);participant.$save(function(response){saveParticipation(response)},function(errorResponse){$scope.error=errorResponse.data.message})}},$scope.findParticipants=function(name){return Participants.query({name:name}).$promise},$scope.newParticipation=function(){$scope.attendee=null,$scope.networkEvent=NetworkEvents.get({networkEventId:$stateParams.networkEventId})},$scope.clearSelection=function(){$scope.attendee=null,$scope.selected=null},$scope.editSelection=function(){$scope.isSelectionEditable=!0},$scope.onSelectedChange=function(){$scope.attendee=null,$scope.isSelectionEditable=!1},$scope.showForm=function(selected,isEditable){return!selected||isEditable},$scope.showSelectedAttributes=function(selected,isEditable){return selected&&!isEditable}}]),angular.module("participations").factory("Participations",["$resource",function($resource){return $resource("network-events/:networkEventId/participations/:participationId",{participationId:"@_id"},{update:{method:"PUT"}})}]),angular.module("users").run(["Menus",function(Menus){Menus.addMenuItem("topbar","Users","users","dropdown","/users(/create)?"),Menus.addSubMenuItem("topbar","users","List Users","users"),Menus.addSubMenuItem("topbar","users","New User","users/create")}]),angular.module("users").config(["$httpProvider",function($httpProvider){$httpProvider.interceptors.push(["$q","$location","Authentication",function($q,$location,Authentication){return{responseError:function(rejection){switch(rejection.status){case 401:Authentication.user=null,$location.path("signin");break;case 403:}return $q.reject(rejection)}}}])}]),angular.module("users").config(["$stateProvider",function($stateProvider){$stateProvider.state("listUsers",{url:"/users",templateUrl:"modules/users/views/list-users.client.view.html"}).state("createUser",{url:"/users/create",templateUrl:"modules/users/views/create-user.client.view.html"}).state("viewUser",{url:"/users/:userId",templateUrl:"modules/users/views/view-user.client.view.html"}).state("editUser",{url:"/users/:userId/edit",templateUrl:"modules/users/views/edit-user.client.view.html"}).state("profile",{url:"/settings/profile",templateUrl:"modules/users/views/settings/edit-profile.client.view.html"}).state("password",{url:"/settings/password",templateUrl:"modules/users/views/settings/change-password.client.view.html"}).state("accounts",{url:"/settings/accounts",templateUrl:"modules/users/views/settings/social-accounts.client.view.html"}).state("signup",{url:"/signup",templateUrl:"modules/users/views/authentication/signup.client.view.html"}).state("signin",{url:"/signin",templateUrl:"modules/users/views/authentication/signin.client.view.html"}).state("forgot",{url:"/password/forgot",templateUrl:"modules/users/views/password/forgot-password.client.view.html"}).state("reset-invalid",{url:"/password/reset/invalid",templateUrl:"modules/users/views/password/reset-password-invalid.client.view.html"}).state("reset-success",{url:"/password/reset/success",templateUrl:"modules/users/views/password/reset-password-success.client.view.html"}).state("reset",{url:"/password/reset/:token",templateUrl:"modules/users/views/password/reset-password.client.view.html"})}]),angular.module("users").controller("AuthenticationController",["$scope","$http","$location","Authentication",function($scope,$http,$location,Authentication){$scope.authentication=Authentication,$scope.authentication.user&&$location.path("/"),$scope.signup=function(){$http.post("/auth/signup",$scope.credentials).success(function(response){$scope.authentication.user=response,$location.path("/")}).error(function(response){$scope.error=response.message})},$scope.signin=function(){$http.post("/auth/signin",$scope.credentials).success(function(response){$scope.authentication.user=response,$location.path("/")}).error(function(response){$scope.error=response.message})}}]),angular.module("users").controller("PasswordController",["$scope","$stateParams","$http","$location","Authentication",function($scope,$stateParams,$http,$location,Authentication){$scope.authentication=Authentication,$scope.authentication.user&&$location.path("/"),$scope.askForPasswordReset=function(){$scope.success=$scope.error=null,$http.post("/auth/forgot",$scope.credentials).success(function(response){$scope.credentials=null,$scope.success=response.message}).error(function(response){$scope.credentials=null,$scope.error=response.message})},$scope.resetUserPassword=function(){$scope.success=$scope.error=null,$http.post("/auth/reset/"+$stateParams.token,$scope.passwordDetails).success(function(response){$scope.passwordDetails=null,Authentication.user=response,$location.path("/password/reset/success")}).error(function(response){$scope.error=response.message})}}]),angular.module("users").controller("SettingsController",["$scope","$http","$location","Users","Authentication",function($scope,$http,$location,Users,Authentication){$scope.user=Authentication.user,$scope.user||$location.path("/"),$scope.hasConnectedAdditionalSocialAccounts=function(provider){for(var i in $scope.user.additionalProvidersData)return!0;return!1},$scope.isConnectedSocialAccount=function(provider){return $scope.user.provider===provider||$scope.user.additionalProvidersData&&$scope.user.additionalProvidersData[provider]},$scope.removeUserSocialAccount=function(provider){$scope.success=$scope.error=null,$http["delete"]("/users/accounts",{params:{provider:provider}}).success(function(response){$scope.success=!0,$scope.user=Authentication.user=response}).error(function(response){$scope.error=response.message})},$scope.updateUserProfile=function(isValid){if(isValid){$scope.success=$scope.error=null;var user=new Users($scope.user);user.$update(function(response){$scope.success=!0,Authentication.user=response},function(response){$scope.error=response.data.message})}else $scope.submitted=!0},$scope.changeUserPassword=function(){$scope.success=$scope.error=null,$http.post("/users/password",$scope.passwordDetails).success(function(response){$scope.success=!0,$scope.passwordDetails=null}).error(function(response){$scope.error=response.message})}}]),angular.module("users").controller("UsersController",["$scope","$stateParams","$location","Authentication","Users",function($scope,$stateParams,$location,Authentication,Users){$scope.authentication=Authentication,$scope.create=function(){var user=new Users($scope.user);user.$save(function(response){$location.path("users/"+response._id),$scope.user.firstName="",$scope.user.lastName="",$scope.user.displayName="",$scope.user.email="",$scope.user.username="",$scope.user.password=""},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(user){if(user){user.$remove();for(var i in $scope.users)$scope.users[i]===user&&$scope.users.splice(i,1)}else $scope.user.$remove(function(){$location.path("users")})},$scope.update=function(){var user=$scope.user;user.$update(function(){$location.path("users/"+user._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.users=Users.query()},$scope.findOne=function(){$scope.user=Users.get({userId:$stateParams.userId})}}]),angular.module("users").factory("Authentication",[function(){var _this=this;return _this._data={user:window.user},_this._data}]),angular.module("users").factory("Users",["$resource",function($resource){return $resource("users/:userId",{userId:"@_id"},{update:{method:"PUT"}})}]);